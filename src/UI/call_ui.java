package UI;

import Model.DataSocket;
import java.io.IOException;
import java.io.ObjectOutputStream;
import java.io.OutputStream;
import main.ChatClient;
import java.net.DatagramSocket;
import java.net.InetAddress;
import java.net.SocketException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.sound.sampled.AudioFormat;
import javax.sound.sampled.AudioSystem;
import javax.sound.sampled.DataLine;
import javax.sound.sampled.Line;
import javax.sound.sampled.LineUnavailableException;
import javax.sound.sampled.Mixer;
import javax.sound.sampled.SourceDataLine;
import javax.sound.sampled.TargetDataLine;
import voice.Player;
import voice.Recorder;

public class call_ui extends javax.swing.JFrame {
    public InetAddress fr_ip;

    DatagramSocket datagramSocket;

    Recorder r;
    Player p;
    static Mixer.Info[] mixerInfo = AudioSystem.getMixerInfo();

    private SourceDataLine audio_out;
    private TargetDataLine audio_in;

    public call_ui() {
        initComponents();
    }

    public void init_audio() {
        try {
            AudioFormat format = getAudioFormat();
            
            if (!AudioSystem.isLineSupported(getInfoIn(format))) {
                System.out.println("Âm thanh đầu vào không hỗ trợ");
                System.exit(0);
            }
            if (!AudioSystem.isLineSupported(getInfoOut(format))) {
                System.out.println("Âm thanh đầu vào không hỗ trợ");
                System.exit(0);
            }
            audio_out = (SourceDataLine) AudioSystem.getLine(getInfoOut(format));
            audio_out.open(format);
            audio_out.start();

            audio_in = (TargetDataLine) AudioSystem.getLine(getInfoIn(format));
            audio_in.open(format);
            audio_in.start();
        } catch (LineUnavailableException ex) {
            Logger.getLogger(call_ui.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    public void init_player() {
        try {
            p = new Player();
            datagramSocket = new DatagramSocket(ChatClient.myPort);
            p.dtSocket = datagramSocket;
            p.audioOut = audio_out;
            System.out.println("My ip: " + ChatClient.myIP + " cổng: " + datagramSocket.getLocalPort());
            p.start();
        } catch (SocketException ex) {
            Logger.getLogger(call_ui.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    public void init_recorder(InetAddress ia, int port) {
        r = new Recorder();
        r.dtSocket = datagramSocket;
        r.audioIn = audio_in;
        r.receiveIP = ia;
        r.reveivePort = port;
        r.start();
    }

    public static AudioFormat getAudioFormat() {
        AudioFormat instance = null;
        
        if(instance == null){
            float sampleRate = 8000.0F;
            int sampleSizeInBits = 16;
            int channels = 2;
            boolean signed = true;
            boolean bigEndian = false;
            instance = new AudioFormat(sampleRate, sampleSizeInBits, channels, signed, bigEndian);
        }
       
        return instance;
    }

    private Line.Info getInfoIn(AudioFormat format) {
        DataLine.Info info_in = null;
        if (info_in == null) {
            info_in = new DataLine.Info(TargetDataLine.class, format);
        }
        return info_in;
    }
     
    private DataLine.Info getInfoOut(AudioFormat format) {
        DataLine.Info info_out = null;
        if (info_out == null) {
            info_out = new DataLine.Info(SourceDataLine.class, format);
        }
        return info_out;
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lb_status = new javax.swing.JLabel();
        btn_end_call = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setResizable(false);

        lb_status.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        lb_status.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lb_status.setText("Đang gọi");

        btn_end_call.setBackground(new java.awt.Color(255, 48, 48));
        btn_end_call.setText("Kết thúc");
        btn_end_call.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_end_callActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(lb_status, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(btn_end_call, javax.swing.GroupLayout.DEFAULT_SIZE, 302, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(lb_status, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 167, Short.MAX_VALUE)
                .addComponent(btn_end_call)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btn_end_callActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_end_callActionPerformed
        ChatClient.calling = false;
        try {
            OutputStream outputStream = ChatClient.socket.getOutputStream();
            ObjectOutputStream objectOutputStream = new ObjectOutputStream(outputStream);

            DataSocket dtsk = new DataSocket();
            dtsk.setAction("endcall");
            dtsk.setNguoiGui(ChatClient.isMe);
            dtsk.setNguoiNhan(ChatClient.nguoiNhan);

            objectOutputStream.writeObject(dtsk);
        } catch (IOException ex) {
            Logger.getLogger(call_ui.class.getName()).log(Level.SEVERE, null, ex);
        }

        this.dispose();
    }//GEN-LAST:event_btn_end_callActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(call_ui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            new call_ui().setVisible(true);
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btn_end_call;
    public javax.swing.JLabel lb_status;
    // End of variables declaration//GEN-END:variables

}
